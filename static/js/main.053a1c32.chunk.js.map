{"version":3,"sources":["logo.svg","Components/Scene3d.js","Components/ProductOptionControl.js","Components/Controls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Scene3d","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","colors","red","Color3","blue","green","yellow","black","white","grey","regions","frame","id","alpha","beta","radius","seat","waterbottle","handlebars","moveCamera","e","TweenMax","to","camera","detail","ease","Power2","easeOut","changeColor","mesh","scene","getMeshByID","meshName","material","clone","diffuseColor","r","color","g","b","onResizeWindow","engine","resize","setEngine","stage","style","width","height","Engine","setScene","Scene","clearColor","setCamera","ArcRotateCamera","Math","PI","Tools","ToRadians","Vector3","attachControl","lowerRadiusLimit","upperRadiusLimit","lowerBetaLimit","upperBetaLimit","lowerAlphaLimit","upperAlphaLimit","loadModels","loader","AssetsManager","loadBikeModel","addMeshTask","onSuccess","t","runRenderLoop","render","HemisphericLight","onError","task","message","exception","console","log","bind","assertThisInitialized","materialPlane","StandardMaterial","diffuseTexture","Texture","hasAlpha","specularColor","logo","MeshBuilder","CreatePlane","position","rotate","Axis","X","loadLogo","load","window","addEventListener","_this2","react_default","a","createElement","className","ref","el","Component","ProductOptionControl","state","bodyDefaultHeight","accordionOpen","toggleAccordion","optionBody","setState","visibility","clientHeight","event","CustomEvent","optionName","dispatchEvent","emitAccordionOpenEvent","emitSectionChangeEvent","onClick","optionValues","map","value","key","preventDefault","emitColorChangeEvent","Controls","options","option","cnt","Components_ProductOptionControl","App","optionNames","Components_Scene3d","Components_Controls","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.053a1c32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// src/Components/Scene3d.js\n\n// Import our dependancies\nimport React, { Component } from 'react'\nimport {TweenMax, Power2} from \"gsap\"\n// Destructuring really helps clean up babylon projects\nimport  {\n  Scene,\n  Engine,\n  AssetsManager,\n  ArcRotateCamera,\n  Vector3,\n  HemisphericLight,\n  Mesh,\n  Color3,\n  Tools,\n  MeshBuilder,\n  Texture,\n  StandardMaterial,\n  Axis\n} from 'babylonjs'\n// Here we extend Reacts component class\nclass Scene3d extends Component {\n\n  colors = {\n    red : new Color3(0.5137, 0, 0),\n    blue :  new Color3(0, 0, 0.5137),\n    green : new Color3(0, 0.5137, 0),\n    yellow : new Color3(0.5137, 0.5137, 0),\n    black : new Color3(0, 0, 0),\n    white : new Color3(1, 1, 1),\n    grey : new Color3(0.5, 0.5, 0.5),\n  }\n  /*\n  * We add an object which contains a hash table\n  * of our regions. These nested objects\n  * contain the coordinates we will move\n  * the camera to if there key is\n  * selected. As well as an id\n  * to select individual meshs\n  */\n  regions = {\n    frame : {  id: 'Cadru1', alpha: 6.283185307179586, beta: 1.5707963267948966, radius: 10.038390861264055 },\n    seat : { id: 'Sa', alpha: 8.460744722271127, beta: 0.7251213529780364, radius: 10.038313487331575 },\n    waterbottle : { id: 'BidonRosu', alpha: 5.549944373409927, beta: 1.7457505434456517, radius: 9.999805933906167 },\n    handlebars : { id: 'Ghidon', alpha: 5.218007193438249, beta: 1.042441018904849, radius: 19.999952560667452 },\n  }\n\n  constructor(props) {\n    super(props);\n    // We bind our events to keep the proper \"this\" context.\n    this.moveCamera = this.moveCamera.bind(this)\n    this.changeColor = this.changeColor.bind(this)\n  }\n  /*\n  *  This function animates the movement of\n  *  the camera to our new region.\n  */\n  moveCamera = (e) => {\n    TweenMax.to(this.camera, 1, {\n        radius: this.regions[e.detail].radius,\n        alpha: this.regions[e.detail].alpha,\n        beta: this.regions[e.detail].beta,\n        ease: Power2.easeOut,\n    })\n  }\n\n  changeColor = (e) => {\n    let mesh = this.scene.getMeshByID(this.regions[e.detail.meshName].id)\n    mesh.material = mesh.material.clone()\n    TweenMax.to( mesh.material.diffuseColor, 1, {\n      r : this.colors[e.detail.color].r,\n      g : this.colors[e.detail.color].g,\n      b : this.colors[e.detail.color].b\n    })\n  }\n  // Makes the canvas behave responsively\n  onResizeWindow = () => {\n      if (this.engine) {\n        this.engine.resize();\n      }\n  }\n  // Sets up our canvas tag for webGL scene\n  setEngine = () => {\n    this.stage.style.width = '200%'\n    this.stage.style.height = '200%'\n    this.engine = new Engine(\n      this.stage\n    )\n    this.stage.style.width = '100%'\n    this.stage.style.height = '100%'\n  }\n  // Creates the scene graph\n  setScene = () => {\n    this.scene = new Scene(this.engine)\n    /*\n      By default scenes have a blue background here we set\n      it to a cool gray color\n    */\n    this.scene.clearColor = new Color3(1,1,1)\n  }\n  /*\n     Adds camera to our scene. A scene needs a camera for anything to\n     be visible. Also sets up rotation Controls\n  */\n  setCamera = () => {\n     this.camera = new ArcRotateCamera(\"Camera\", Math.PI * 2, Tools.ToRadians(80), 20, new Vector3( 0, 5, -5 ), this.scene);\n     this.camera.attachControl(this.stage, true);\n     this.camera.lowerRadiusLimit = 9\n     this.camera.upperRadiusLimit = 20;\n     this.camera.lowerBetaLimit = this.camera.beta - Tools.ToRadians(80)\n     this.camera.upperBetaLimit = this.camera.beta + Tools.ToRadians(20);\n     this.camera.lowerAlphaLimit = this.camera.alpha - Tools.ToRadians(180)\n     this.camera.upperAlphaLimit = this.camera.alpha + Tools.ToRadians(180)\n\n  }\n\n  loadModels = () => {\n    /*\n    * the AssetManager class is responsible\n    * for loading files\n    */\n    let loader = new AssetsManager(this.scene)\n    // Arguments: \"ID\", \"Root URL\", \"URL Prefix\", \"Filename\"\n    let loadBikeModel = loader.addMeshTask(\"bike\", \"\", \"\", \"bike.babylon\")\n    /*\n    *  Loader is given a callback to run when the model has loaded\n    *  the variable t is our imported scene. You can use\n    *  it to examine all the mesh's loaded.\n    */\n    loadBikeModel.onSuccess = ( t ) => {\n\n      this.scene.getMeshByID('Sa').material = this.scene.getMeshByID('Sa').material.clone()\n      this.scene.getMeshByID('Ghidon').material = this.scene.getMeshByID('Ghidon').material.clone()\n      this.scene.getMeshByID('BidonRosu').material = this.scene.getMeshByID('BidonRosu').material.clone()\n      this.scene.getMeshByID('Furca').material = this.scene.getMeshByID('Furca').material.clone()\n      this.scene.getMeshByID('Cadru1').material.diffuseColor = this.scene.getMeshByID('Cadru1').material.clone()\n\n      this.scene.getMeshByID('Sa').material.diffuseColor = this.colors['grey']\n      this.scene.getMeshByID('Ghidon').material.diffuseColor = this.colors['grey']\n      this.scene.getMeshByID('BidonRosu').material.diffuseColor = this.colors['grey']\n      this.scene.getMeshByID('Furca').material.diffuseColor = this.colors['black']\n      this.scene.getMeshByID('Cadru1').material.diffuseColor = this.colors['white']\n\n      // Start the animation loop once the model is loaded\n      this.engine.runRenderLoop(() => {\n        this.scene.render()\n      })\n      // The model came in a little dark so lets add some extra light\n      new HemisphericLight('light1', new Vector3(0,1,0), this.scene)\n    }\n    // It also calls an Error callback if something goes wrong\n    loadBikeModel.onError = function (task, message, exception) {\n        console.log(message, exception);\n    }\n    // We return the fully configured loader\n    return loader\n  }\n\n  loadLogo() {\n\n    let url = 'pxslogo.png'\n    var materialPlane = new StandardMaterial(\"logo\", this.scene);\n    materialPlane.diffuseTexture = new Texture(url, this.scene);\n    materialPlane.diffuseTexture.hasAlpha = true\n    materialPlane.specularColor = new Color3(0, 0, 0);\n\n\n    let logo = MeshBuilder.CreatePlane('logo', {width: 470 / 20, height: 440 / 20}, this.scene, true)\n    logo.position = new Vector3(0, 0, -5);\n    logo.rotate(Axis.X, Math.PI / 2)\n    logo.material = materialPlane;\n  }\n\n  //Build the scene when the component has been loaded.\n  componentDidMount() {\n    this.setEngine()\n    this.setScene()\n    this.setCamera()\n    this.loadLogo()\n    /*\n    *  the loader we return has a load method\n    *  attached that will initiate everything.\n    */\n    this.loadModels().load()\n    window.addEventListener('resize', this.onResizeWindow)\n    // We can add our custom events just like any other DOM event\n    window.addEventListener('move-camera', this.moveCamera)\n    window.addEventListener('change-color', this.changeColor)\n  }\n  //Renderes our Canvas tag and saves a reference to it.\n  render() {\n    return (\n      <canvas className=\"scene\" ref={ el => this.stage = el}>\n      </canvas>\n    )\n  }\n}\n\n//returns the scene to be used by other components\nexport default Scene3d\n","// src/Components/ProductOptionControl.js\nimport React, { Component } from 'react'\nimport {TweenMax, Power2} from \"gsap\"\n\nclass ProductOptionControl extends Component {\n\n  constructor(props) {\n    super(props)\n    // Set initial state\n    this.state = {\n    \tbodyDefaultHeight: null,\n    \taccordionOpen: false  \t\n    }\n    /*\n    * Bind event to this class. We will use this method in a\n    * click event listener and this is to keep the\n    * correct scope.\n    */\n    this.toggleAccordion = this.toggleAccordion.bind(this)\n    window.addEventListener('accordion-open', () => {\n      if(this.state.accordionOpen) {\n        TweenMax.to(this.optionBody, 0.05, {height: 0, ease: Power2.easeOut})\n        this.setState({accordionOpen: false})\n        this.optionBody.style.visibility = 'hidden'\n      }\n    })\n  }\n\n  componentDidMount() {\n     /*\n     * We record the components initial height so it can be used\n     * make the accordion open and close. This way we know\n     * exactly how tall it needs to be.\n     */\n     this.setState({bodyDefaultHeight: this.optionBody.clientHeight})\n     // Then we set its height to 0 to close it.\n     this.optionBody.style.height = 0\n     this.optionBody.style.visibility = 'hidden'\n  }\n\n  /*\n  * Add a new method to notify our scene that it\n  * needs to move the camera when a control\n  * is opened so we can get a better view\n  * of the area our control is editing.\n  */\n  emitSectionChangeEvent() {\n    // Arguments: Event Name, Event Options\n  \tlet event = new CustomEvent('move-camera', { detail: this.props.optionName })\n    // Triggers the event on the window object\n  \twindow.dispatchEvent(event)\n  }\n\n  emitColorChangeEvent(color) {\n  \tlet event = new CustomEvent('change-color', { detail: {\n  \t\tmeshName: this.props.optionName,\n  \t\tcolor\n  \t}})\n  \twindow.dispatchEvent(event)\n  }\n\n  emitAccordionOpenEvent(color) {\n    let event = new CustomEvent('accordion-open')\n    window.dispatchEvent(event)\n  }\n\n  toggleAccordion(e) {\n    /*\n    * When a user clicks the the title of the control we\n    * want to open the accordion, unless it is already\n    * open in which case we want to close it\n    */\n  \tif(!this.state.accordionOpen) {\n      /*\n      *  To open the accordion we set its height to the original\n      *  value we stored when the component mounted\n      */\n      this.setState({accordionOpen: true})\n      this.optionBody.style.visibility = 'visible'\n      TweenMax.to(this.optionBody, 0.05, {height: this.state.bodyDefaultHeight, ease: Power2.easeOut})\n      this.emitAccordionOpenEvent()\n      /*\n      * Call our new method here in the accordion\n      * event hook\n      */\n      this.emitSectionChangeEvent()\n  \t} else {\n      // back to 0 to close\n      TweenMax.to(this.optionBody, 0.05, {height: 0, ease: Power2.easeOut})\n  \t\tthis.setState({accordionOpen: false})\n      this.optionBody.style.visibility = 'hidden'\n  \t}\n  }\n\n  render() {\n    return (\n    \t<div className=\"productoption\" >\n          {/*\n          *  The accordion header, this is always visible. We attach a click\n          *  event handler to it to handle opening and closing of\n          *  the accordion body\n          */}\n\t        <button onClick={this.toggleAccordion} className=\"productoption_header\" >\n\t        \t{this.props.optionName}\n\t        </button>\n          {/*\n          *  We capture another reference to a DOM element here.\n          *  This is to read and modify the height so we\n          *  can make our accordion\n          */}\n\t        <div className=\"productoption_body\" ref={ el => this.optionBody = el} >\n             {/* Map over all the possible options and list them out */}\n\t        \t{this.props.optionValues.map( value => {\n\t        \t\treturn <button key={value} onClick={(e) => {\n\t        \t\t\te.preventDefault()\n\t        \t\t\tthis.emitColorChangeEvent(value)\n\t        \t\t}} className=\"productoption_btn\" >{value}</button>\n\t        \t})}\n\t        </div>\n        </div>\n    )\n  }\n}\n\nexport default ProductOptionControl\n","// src/Components/Controls.js\r\nimport React, { Component } from 'react'\r\n// The Controls component will import out ProductOptionControl\r\nimport ProductOptionControl from './ProductOptionControl'\r\n\r\nclass Controls extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"controls\" >\r\n        {/* We are going to take our options as an array of props.*/}\r\n        {this.props.options.map( (option, cnt) =>  {\r\n          {/* We'll render an inidvidual control for each item in the array */}\r\n          return <ProductOptionControl key={option} optionName={option} optionValues={this.props.optionValues[cnt]} />\r\n        })}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Controls\r\n","// src/App.js\n        import React, { Component } from 'react'\n        import logo from './logo.svg'\n        import './App.css'\n        import Scene3d from './Components/Scene3d.js'\n        import Controls from './Components/Controls.js'\n\n        class App extends Component {\n          constructor(props) {\n            super(props)\n            this.state = {\n              optionNames: [ 'frame', 'seat', 'waterbottle', 'handlebars' ],\n              optionValues: [\n                [ 'red', 'blue', 'green', 'yellow' ],\n                [ 'grey', 'white', 'black' ],\n                [ 'grey', 'white', 'black' ],\n                [ 'grey', 'white', 'black' ]\n              ]\n            }\n          }\n          render() {\n            return (\n              <div className=\"App\">\n                <Scene3d />\n                <Controls options={this.state.optionNames} optionValues={this.state.optionValues}/>\n              </div>\n            )\n          }\n        }\n\n        export default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}